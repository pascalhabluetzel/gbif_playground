x[i] <- geosphere::lengthLine(path)
})
s <
84769729687697698=/)/&&/)()
s <- min(as.numeric(x), na.rm=T)/1000
print(paste("The shortest distance is", s, "km for", species[1], species[2]))
x <- sapply(1:dim(d)[1], function(i) {
gbif_occurrence <- structure(c(d$decimalLongitude[i], d$decimalLatitude[i]), .Dim = 1:2)
path <<- shortestPath(tr, sampling_location, gbif_occurrence, output = "SpatialLines")
x[i] <- geosphere::lengthLine(path)
})
x <- rep("NA", dim(d)[1])
path <- vector(mode = "list", length = dim(d)[1])
dim(d)[1]
path <- vector(mode = "list", length = dim(d)[1])
path[1]
start_time <- Sys.time()
x <- sapply(1:dim(d)[1], function(i) {
gbif_occurrence <- structure(c(d$decimalLongitude[i], d$decimalLatitude[i]), .Dim = 1:2)
path[i] <- shortestPath(tr, sampling_location, gbif_occurrence, output = "SpatialLines")
x[i] <- geosphere::lengthLine(path)
})
x <- sapply(1:dim(d)[1], function(i) {
gbif_occurrence <- structure(c(d$decimalLongitude[i], d$decimalLatitude[i]), .Dim = 1:2)
path[i] <- shortestPath(tr, sampling_location, gbif_occurrence, output = "SpatialLines")
x[i] <- geosphere::lengthLine(path[i])
})
x <- sapply(1:dim(d)[1], function(i) {
gbif_occurrence <- structure(c(d$decimalLongitude[i], d$decimalLatitude[i]), .Dim = 1:2)
path[[i]] <- shortestPath(tr, sampling_location, gbif_occurrence, output = "SpatialLines")
x[i] <- geosphere::lengthLine(path[[i]])
})
x <- sapply(1:dim(d)[1], function(i) {
gbif_occurrence <- structure(c(d$decimalLongitude[i], d$decimalLatitude[i]), .Dim = 1:2)
path[[i]] <- shortestPath(tr, sampling_location, gbif_occurrence, output = "SpatialLines")
x[i] <- geosphere::lengthLine(path[[i]])
})
x <- rep("NA", dim(d)[1])
x <- sapply(1:dim(d)[1], function(i) {
gbif_occurrence <- structure(c(d$decimalLongitude[i], d$decimalLatitude[i]), .Dim = 1:2)
path[[i]] <- shortestPath(tr, sampling_location, gbif_occurrence, output = "SpatialLines")
x[i] <- geosphere::lengthLine(path[[i]])
})
x[i] <- geosphere::lengthLine(path[i])
x <- sapply(1:dim(d)[1], function(i) {
gbif_occurrence <- structure(c(d$decimalLongitude[i], d$decimalLatitude[i]), .Dim = 1:2)
path[i] <- shortestPath(tr, sampling_location, gbif_occurrence, output = "SpatialLines")
x[i] <- geosphere::lengthLine(path[i])
})
x <- sapply(1:dim(d)[1], function(i) {
gbif_occurrence <- structure(c(d$decimalLongitude[i], d$decimalLatitude[i]), .Dim = 1:2)
path[i] <- shortestPath(tr, sampling_location, gbif_occurrence, output = "SpatialLines")
x[i] <- geosphere::lengthLine(path[[i]])
})
gbif_occurrence <- structure(c(d$decimalLongitude[1], d$decimalLatitude[1]), .Dim = 1:2)
path[[1]] <- shortestPath(tr, sampling_location, gbif_occurrence, output = "SpatialLines")
path[[2]] <- shortestPath(tr, sampling_location, gbif_occurrence, output = "SpatialLines")
y <- sapply(1:dim(d)[1], function(i) {
gbif_occurrence <- structure(c(d$decimalLongitude[i], d$decimalLatitude[i]), .Dim = 1:2)
path[[i]] <- shortestPath(tr, sampling_location, gbif_occurrence, output = "SpatialLines")
x[i] <- geosphere::lengthLine(path[[i]])
})
y <- sapply(1:dim(d)[1], function(i) {
gbif_occurrence <- structure(c(d$decimalLongitude[i], d$decimalLatitude[i]), .Dim = 1:2)
path[[i]] <<- shortestPath(tr, sampling_location, gbif_occurrence, output = "SpatialLines")
x[i] <- geosphere::lengthLine(path[[i]])
})
x <- sapply(1:dim(d)[1], function(i) {
gbif_occurrence <- structure(c(d$decimalLongitude[i], d$decimalLatitude[i]), .Dim = 1:2)
path[[i]] <<- shortestPath(tr, sampling_location, gbif_occurrence, output = "SpatialLines")
x[i] <- geosphere::lengthLine(path[[i]])
})
world = map_data("world")
p <- ggplot(world, aes(long, lat)) +
coord_sf(xlim = c(long-o, long+o), ylim = c(lat-o, lat+o)) +
geom_polygon(aes(group = group), fill = "white",
color = "gray40", size = .2) +
geom_jitter(data = d,
aes(decimalLongitude, decimalLatitude), alpha=0.6,
size = 4, color = "red") +
geom_path(path[[1]])
world = map_data("world")
p <- ggplot(world, aes(long, lat)) +
coord_sf(xlim = c(long-o, long+o), ylim = c(lat-o, lat+o)) +
geom_polygon(aes(group = group), fill = "white",
color = "gray40", size = .2) +
geom_jitter(data = d,
aes(decimalLongitude, decimalLatitude), alpha=0.6,
size = 4, color = "red") +
geom_path(aes(path[[1]]))
require(ggspatial)
library(ggspatial)
install.packages("ggspatial")
library(ggspatial)
world = map_data("world")
p <- ggplot(world, aes(long, lat)) +
coord_sf(xlim = c(long-o, long+o), ylim = c(lat-o, lat+o)) +
geom_polygon(aes(group = group), fill = "white",
color = "gray40", size = .2) +
geom_jitter(data = d,
aes(decimalLongitude, decimalLatitude), alpha=0.6,
size = 4, color = "red") +
geom_spatial(data = path[[1]])
world = map_data("world")
p <- ggplot(world, aes(long, lat)) +
coord_sf(xlim = c(long-o, long+o), ylim = c(lat-o, lat+o)) +
geom_polygon(aes(group = group), fill = "white",
color = "gray40", size = .2) +
geom_jitter(data = d,
aes(decimalLongitude, decimalLatitude), alpha=0.6,
size = 4, color = "red") +
ggspatial::geom_spatial(data = path[[1]])
sldf <- SpatialLinesDataFrame(path[[1]], data = data.frame(ID = 1))
sldf <- SpatialLinesDataFrame(path[[1]], data = data.frame(ID = 1))
p <- ggplot(world, aes(long, lat)) +
coord_sf(xlim = c(long-o, long+o), ylim = c(lat-o, lat+o)) +
geom_polygon(aes(group = group), fill = "white",
color = "gray40", size = .2) +
geom_jitter(data = d,
aes(decimalLongitude, decimalLatitude), alpha=0.6,
size = 4, color = "red") +
ggspatial::geom_spatial(data = sldf)
fortify(sldf)
sldf_f <- fortify(sldf)
p <- ggplot(world, aes(long, lat)) +
coord_sf(xlim = c(long-o, long+o), ylim = c(lat-o, lat+o)) +
geom_polygon(aes(group = group), fill = "white",
color = "gray40", size = .2) +
geom_jitter(data = d,
aes(decimalLongitude, decimalLatitude), alpha=0.6,
size = 4, color = "red") +
ggspatial::geom_spatial(data = sldf_f)
plot(sldf)
p <- ggplot(world, aes(long, lat)) +
coord_sf(xlim = c(long-o, long+o), ylim = c(lat-o, lat+o)) +
geom_polygon(aes(group = group), fill = "white",
color = "gray40", size = .2) +
geom_jitter(data = d,
aes(decimalLongitude, decimalLatitude), alpha=0.6,
size = 4, color = "red") +
geom_path(sldf)
p <- ggplot(world, aes(long, lat)) +
coord_sf(xlim = c(long-o, long+o), ylim = c(lat-o, lat+o)) +
geom_polygon(aes(group = group), fill = "white",
color = "gray40", size = .2) +
geom_jitter(data = d,
aes(decimalLongitude, decimalLatitude), alpha=0.6,
size = 4, color = "red") +
geom_path(sldf_f)
p <- ggplot(world, aes(long, lat)) +
coord_sf(xlim = c(long-o, long+o), ylim = c(lat-o, lat+o)) +
geom_polygon(aes(group = group), fill = "white",
color = "gray40", size = .2) +
geom_jitter(data = d,
aes(decimalLongitude, decimalLatitude), alpha=0.6,
size = 4, color = "red") +
geom_path(data=sldf_f)
p <- ggplot(world, aes(long, lat)) +
coord_sf(xlim = c(long-o, long+o), ylim = c(lat-o, lat+o)) +
geom_polygon(aes(group = group), fill = "white",
color = "gray40", size = .2) +
geom_jitter(data = d,
aes(decimalLongitude, decimalLatitude), alpha=0.6,
size = 4, color = "red") +
geom_path(aes(sldf_f))
p <- ggplot(world, aes(long, lat)) +
coord_sf(xlim = c(long-o, long+o), ylim = c(lat-o, lat+o)) +
geom_polygon(aes(group = group), fill = "white",
color = "gray40", size = .2) +
geom_jitter(data = d,
aes(decimalLongitude, decimalLatitude), alpha=0.6,
size = 4, color = "red") +
geom_path(data=sldf_f)
p
x[which.min(x)]
which.min(x)
sldf <- SpatialLinesDataFrame(path[[which.min(x)]], data = data.frame(ID = 1))
sldf <- SpatialLinesDataFrame(path[[which.min(x)]], data = data.frame(ID = 1))
sldf_f <- fortify(sldf)
world = map_data("world")
p <- ggplot(world, aes(long, lat)) +
coord_sf(xlim = c(long-o, long+o), ylim = c(lat-o, lat+o)) +
geom_polygon(aes(group = group), fill = "white",
color = "gray40", size = .2) +
geom_jitter(data = d,
aes(decimalLongitude, decimalLatitude), alpha=0.6,
size = 4, color = "red") +
geom_path(data=sldf_f)
p
world = map_data("world")
p <- ggplot(world, aes(long, lat)) +
coord_sf(xlim = c(long-o, long+o), ylim = c(lat-o, lat+o)) +
geom_polygon(aes(group = group), fill = "white",
color = "gray40", size = .2) +
geom_jitter(data = d,
aes(decimalLongitude, decimalLatitude), alpha=0.6,
size = 4, color = "red") +
geom_path(data=sldf_f, col="blue")
p
long <- 2.922372
lat <- 51.237312
o <- 20
species <- scan(text = sp_list[1,], what = "")
occ_test(longitude=long, latitude=lat, species=species, window=o, map=TRUE)
sampling_location <- structure(c(long, lat), .Dim = 1:2) # enter here the coordinates of the sampling site in wgs84
x <- rep("NA", dim(d)[1])
path <- vector(mode = "list", length = dim(d)[1])
start_time <- Sys.time()
x <- sapply(1:dim(d)[1], function(i) {
gbif_occurrence <- structure(c(d$decimalLongitude[i], d$decimalLatitude[i]), .Dim = 1:2)
path[[i]] <<- shortestPath(tr, sampling_location, gbif_occurrence, output = "SpatialLines")
x[i] <- geosphere::lengthLine(path[[i]])
})
sldf <- SpatialLinesDataFrame(path[[which.min(x)]], data = data.frame(ID = 1))
sldf_f <- fortify(sldf)
world = map_data("world")
p <- ggplot(world, aes(long, lat)) +
coord_sf(xlim = c(long-o, long+o), ylim = c(lat-o, lat+o)) +
geom_polygon(aes(group = group), fill = "white",
color = "gray40", size = .2) +
geom_jitter(data = d,
aes(decimalLongitude, decimalLatitude), alpha=0.6,
size = 4, color = "red") +
geom_path(data=sldf_f, col="blue")
p
data(wrld_simpl) #use wrld_simpl from the maptools package
# Generate a scaffold for the raster file
world_crs <- crs(wrld_simpl)
world <- wrld_simpl
worldshp <- spTransform(world, world_crs)
ras <- raster(nrow=1200, ncol=1200)
# Generate a raster file
worldmask <- rasterize(worldshp, ras)
worldras <- is.na(worldmask) # inverse water and land, so ocean becomes 1 and land 0
worldras[worldras==0] <- 999 # set land to 999
# Create a Transition object from the raster
tr <- transition(worldras, function(x) 1/mean(x), 16)
tr = geoCorrection(tr, scl=FALSE)
start_time <- Sys.time()
long <- 2.922372
lat <- 51.237312
o <- 20
species <- scan(text = sp_list[1,], what = "")
occ_test(longitude=long, latitude=lat, species=species, window=o, map=TRUE)
sampling_location <- structure(c(long, lat), .Dim = 1:2) # enter here the coordinates of the sampling site in wgs84
x <- rep("NA", dim(d)[1])
path <- vector(mode = "list", length = dim(d)[1])
x <- sapply(1:dim(d)[1], function(i) {
gbif_occurrence <- structure(c(d$decimalLongitude[i], d$decimalLatitude[i]), .Dim = 1:2)
path[[i]] <<- shortestPath(tr, sampling_location, gbif_occurrence, output = "SpatialLines")
x[i] <- geosphere::lengthLine(path[[i]])
})
sldf <- SpatialLinesDataFrame(path[[which.min(x)]], data = data.frame(ID = 1))
sldf_f <- fortify(sldf)
world = map_data("world")
p <- ggplot(world, aes(long, lat)) +
coord_sf(xlim = c(long-o, long+o), ylim = c(lat-o, lat+o)) +
geom_polygon(aes(group = group), fill = "white",
color = "gray40", size = .2) +
geom_jitter(data = d,
aes(decimalLongitude, decimalLatitude), alpha=0.6,
size = 4, color = "red") +
geom_path(data=sldf_f, col="blue")
p
end_time <- Sys.time()
end_time - start_time
occ_test <- function(longitude, latitude, species, window, map = FALSE){
polygon <- paste("Polygon ((",longitude-window/2,latitude+window/2,",",longitude+window/2,latitude+window/2,",",longitude+window/2,latitude-window/2,",",longitude-window/2,latitude-window/2,",",longitude-window/2,latitude+window/2,"))", sep=" ")
url1 <- paste("https://api.gbif.org/v1/species/match?name=", species[1], "%20", species[2], sep="")
dat <- fromJSON(url1, flatten = TRUE)
gbif_download <- occ_download(type="and", pred("taxonKey", dat$speciesKey), pred_within(polygon), format = "SIMPLE_CSV", user = .user, pwd = .pwd, email = .email)
occ_download_wait(gbif_download)
d <<- occ_download_get(gbif_download, overwrite=T) %>%
occ_download_import()
sampling_location <- structure(c(long, lat), .Dim = 1:2) # enter here the coordinates of the sampling site in wgs84
x <- rep("NA", dim(d)[1])
path <- vector(mode = "list", length = dim(d)[1])
x <- sapply(1:dim(d)[1], function(i) {
gbif_occurrence <- structure(c(d$decimalLongitude[i], d$decimalLatitude[i]), .Dim = 1:2)
path[[i]] <<- shortestPath(tr, sampling_location, gbif_occurrence, output = "SpatialLines")
x[i] <- geosphere::lengthLine(path[[i]])
})
sldf <- SpatialLinesDataFrame(path[[which.min(x)]], data = data.frame(ID = 1))
sldf_f <- fortify(sldf)
if (map == TRUE){
world = map_data("world")
p <- ggplot(world, aes(long, lat)) +
coord_sf(xlim = c(long-o, long+o), ylim = c(lat-o, lat+o)) +
geom_polygon(aes(group = group), fill = "white",
color = "gray40", size = .2) +
geom_jitter(data = d,
aes(decimalLongitude, decimalLatitude), alpha=0.6,
size = 4, color = "red") +
geom_path(data=sldf_f, col="blue")
}
plot(p)
print(paste("There are",dim(d)[1],"occurrences of",species[1],species[2],"in the chosen window.", sep=" "))
}
occ_test(longitude=long, latitude=lat, species=species, window=o, map=TRUE)
occ_test <- function(longitude, latitude, species, window, map = FALSE){
polygon <- paste("Polygon ((",longitude-window/2,latitude+window/2,",",longitude+window/2,latitude+window/2,",",longitude+window/2,latitude-window/2,",",longitude-window/2,latitude-window/2,",",longitude-window/2,latitude+window/2,"))", sep=" ")
url1 <- paste("https://api.gbif.org/v1/species/match?name=", species[1], "%20", species[2], sep="")
dat <- fromJSON(url1, flatten = TRUE)
gbif_download <- occ_download(type="and", pred("taxonKey", dat$speciesKey), pred_within(polygon), format = "SIMPLE_CSV", user = .user, pwd = .pwd, email = .email)
occ_download_wait(gbif_download)
d <<- occ_download_get(gbif_download, overwrite=T) %>%
occ_download_import()
sampling_location <- structure(c(long, lat), .Dim = 1:2) # enter here the coordinates of the sampling site in wgs84
x <- rep("NA", dim(d)[1])
path <- vector(mode = "list", length = dim(d)[1])
x <- sapply(1:dim(d)[1], function(i) {
gbif_occurrence <- structure(c(d$decimalLongitude[i], d$decimalLatitude[i]), .Dim = 1:2)
path[[i]] <<- shortestPath(tr, sampling_location, gbif_occurrence, output = "SpatialLines")
x[i] <- geosphere::lengthLine(path[[i]])
})
sldf <- SpatialLinesDataFrame(path[[which.min(x)]], data = data.frame(ID = 1))
sldf_f <- fortify(sldf)
if (map == TRUE){
world = map_data("world")
p <- ggplot(world, aes(long, lat)) +
coord_sf(xlim = c(long-o, long+o), ylim = c(lat-o, lat+o)) +
geom_polygon(aes(group = group), fill = "white",
color = "gray40", size = .2) +
geom_jitter(data = d,
aes(decimalLongitude, decimalLatitude), alpha=0.6,
size = 4, color = "red") +
geom_path(data=sldf_f, col="blue")
}
plot(p)
print(paste("There are",dim(d)[1],"occurrences of",species[1],species[2],"in the chosen window.", sep=" "))
s <- min(as.numeric(x), na.rm=T)/1000
print(paste("The distance to the nearest previously know occurrence of",species[1],species[2],"is", s,"km.", sep=" "))
}
start_time <- Sys.time()
long <- 2.922372
lat <- 51.237312
o <- 20
species <- scan(text = sp_list[1,], what = "")
occ_test(longitude=long, latitude=lat, species=species, window=o, map=TRUE)
range_expansion <- function(longitude, latitude, species, window, map = FALSE){
polygon <- paste("Polygon ((",longitude-window/2,latitude+window/2,",",longitude+window/2,latitude+window/2,",",longitude+window/2,latitude-window/2,",",longitude-window/2,latitude-window/2,",",longitude-window/2,latitude+window/2,"))", sep=" ")
url1 <- paste("https://api.gbif.org/v1/species/match?name=", species[1], "%20", species[2], sep="")
dat <- fromJSON(url1, flatten = TRUE)
gbif_download <- occ_download(type="and", pred("taxonKey", dat$speciesKey), pred_within(polygon), format = "SIMPLE_CSV", user = .user, pwd = .pwd, email = .email)
occ_download_wait(gbif_download)
d <<- occ_download_get(gbif_download, overwrite=T) %>%
occ_download_import()
sampling_location <- structure(c(long, lat), .Dim = 1:2) # enter here the coordinates of the sampling site in wgs84
x <- rep("NA", dim(d)[1])
path <- vector(mode = "list", length = dim(d)[1])
x <- sapply(1:dim(d)[1], function(i) {
gbif_occurrence <- structure(c(d$decimalLongitude[i], d$decimalLatitude[i]), .Dim = 1:2)
path[[i]] <<- shortestPath(tr, sampling_location, gbif_occurrence, output = "SpatialLines")
x[i] <- geosphere::lengthLine(path[[i]])
})
sldf <- SpatialLinesDataFrame(path[[which.min(x)]], data = data.frame(ID = 1))
sldf_f <- fortify(sldf)
if (map == TRUE){
world = map_data("world")
p <- ggplot(world, aes(long, lat)) +
coord_sf(xlim = c(long-o, long+o), ylim = c(lat-o, lat+o)) +
geom_polygon(aes(group = group), fill = "white",
color = "gray40", size = .2) +
geom_jitter(data = d,
aes(decimalLongitude, decimalLatitude), alpha=0.6,
size = 4, color = "red") +
geom_path(data=sldf_f, col="blue")
}
plot(p)
print(paste("There are",dim(d)[1],"reported occurrences of",species[1],species[2],"in the chosen window.", sep=" "))
s <- min(as.numeric(x), na.rm=T)/1000
print(paste("The distance to the nearest previously know occurrence of",species[1],species[2],"is", s,"km.", sep=" "))
}
# Make a polygon around the sampling location
start_time <- Sys.time()
long <- 2.922372
lat <- 51.237312
o <- 20
species <- scan(text = sp_list[1,], what = "")
range_expansion(longitude=long, latitude=lat, species=species, window=o, map=TRUE)
for (i in 1:nrow(sp_list)){
species <- scan(text = sp_list[i,], what = "")
range_expansion(longitude=long, latitude=lat, species=species, window=o, map=TRUE)
}
species <- scan(text = sp_list[3,], what = "")
range_expansion_animation <- function(longitude, latitude, species, window, map = FALSE){
polygon <- paste("Polygon ((",longitude-window/2,latitude+window/2,",",longitude+window/2,latitude+window/2,",",longitude+window/2,latitude-window/2,",",longitude-window/2,latitude-window/2,",",longitude-window/2,latitude+window/2,"))", sep=" ")
url1 <- paste("https://api.gbif.org/v1/species/match?name=", species[1], "%20", species[2], sep="")
dat <- fromJSON(url1, flatten = TRUE)
gbif_download <- occ_download(type="and", pred("taxonKey", dat$speciesKey), pred_within(polygon), format = "SIMPLE_CSV", user = .user, pwd = .pwd, email = .email)
occ_download_wait(gbif_download)
d <<- occ_download_get(gbif_download, overwrite=T) %>%
occ_download_import()
}
range_expansion_animation <- function(longitude, latitude, species, window, map = FALSE){
polygon <- paste("Polygon ((",longitude-window/2,latitude+window/2,",",longitude+window/2,latitude+window/2,",",longitude+window/2,latitude-window/2,",",longitude-window/2,latitude-window/2,",",longitude-window/2,latitude+window/2,"))", sep=" ")
url1 <- paste("https://api.gbif.org/v1/species/match?name=", species[1], "%20", species[2], sep="")
dat <- fromJSON(url1, flatten = TRUE)
gbif_download <- occ_download(type="and", pred("taxonKey", dat$speciesKey), pred_within(polygon), format = "SIMPLE_CSV", user = .user, pwd = .pwd, email = .email)
occ_download_wait(gbif_download)
d <<- occ_download_get(gbif_download, overwrite=T) %>%
occ_download_import()
}
range_expansion_animation <- function(longitude, latitude, species, window){
polygon <- paste("Polygon ((",longitude-window/2,latitude+window/2,",",longitude+window/2,latitude+window/2,",",longitude+window/2,latitude-window/2,",",longitude-window/2,latitude-window/2,",",longitude-window/2,latitude+window/2,"))", sep=" ")
url1 <- paste("https://api.gbif.org/v1/species/match?name=", species[1], "%20", species[2], sep="")
dat <- fromJSON(url1, flatten = TRUE)
gbif_download <- occ_download(type="and", pred("taxonKey", dat$speciesKey), pred_within(polygon), format = "SIMPLE_CSV", user = .user, pwd = .pwd, email = .email)
occ_download_wait(gbif_download)
d <<- occ_download_get(gbif_download, overwrite=T) %>%
occ_download_import()
}
range_expansion(longitude=long, latitude=lat, species=species, window=o)
range_expansion_animation(longitude=long, latitude=lat, species=species, window=o)
d$eventDate
install.packages("lubridate")
require(lubridate)
data <- asDate(d$eventDate)
data <- POSIXct(d$eventDate)
data <- as.POSIXct(d$eventDate)
date <- as.POSIXct(d$eventDate)
date$year
format(date, format="%Y")
as.integer(format(date, format="%Y"))
world = map_data("world")
p <- ggplot(world, aes(long, lat)) +
coord_sf(xlim = c(long-o, long+o), ylim = c(lat-o, lat+o)) +
geom_polygon(aes(group = group), fill = "white",
color = "gray40", size = .2) +
geom_jitter(data = d,
aes(decimalLongitude, decimalLatitude), alpha=0.6,
size = 4, color = "red")
p
map_with_animation <- p +
transition_time(year) +
ggtitle('Year: {frame_time}',
subtitle = 'Frame {frame} of {nframes}')
num_years <- max(year) - min(year) + 1
animate(map_with_animation, nframes = num_years)
install.packages("gganimate")
require(gganimate)
map_with_animation <- p +
transition_time(year) +
ggtitle('Year: {frame_time}',
subtitle = 'Frame {frame} of {nframes}')
map_with_animation
map_with_animation <- p +
transition_time(year) +
ggtitle('Year: {frame_time}',
subtitle = 'Frame {frame} of {nframes}')
num_years <- max(year) - min(year) + 1
animate(map_with_animation, nframes = num_years)
max(year)
dim(d)
d <- d[complete.cases(d$eventDate),]
d <- d[complete.cases(d$eventDate),]
dim(d)
date <- as.POSIXct(d$eventDate)
date <- as.POSIXct(d$eventDate)
date$year
year <- as.integer(format(date, format="%Y"))
world = map_data("world")
p <- ggplot(world, aes(long, lat)) +
coord_sf(xlim = c(long-o, long+o), ylim = c(lat-o, lat+o)) +
geom_polygon(aes(group = group), fill = "white",
color = "gray40", size = .2) +
geom_jitter(data = d,
aes(decimalLongitude, decimalLatitude), alpha=0.6,
size = 4, color = "red")
p
require(gganimate)
map_with_animation <- p +
transition_time(year) +
ggtitle('Year: {frame_time}',
subtitle = 'Frame {frame} of {nframes}')
num_years <- max(year) - min(year) + 1
animate(map_with_animation, nframes = num_years)
map_with_shadow <- map_with_animation +
shadow_mark()
map_with_shadow <- map_with_animation +
shadow_mark()
animate(map_with_shadow, nframes = num_years)
install.packages("gifski")
install.packages("av")
install.packages("gifski")
require(gifski)
map_with_animation <- p +
transition_time(year) +
ggtitle('Year: {frame_time}',
subtitle = 'Frame {frame} of {nframes}')
num_years <- max(year) - min(year) + 1
animate(map_with_animation, nframes = num_years)
map_with_shadow <- map_with_animation +
shadow_mark()
animate(map_with_shadow, nframes = num_years)
anim_save("example1.gif", map_with_shadow, nframes = num_years, fps = 1)
animate(map_with_shadow, nframes = num_years, renderer = gifski_renderer())
anim_save("example1.gif", map_with_shadow, nframes = num_years, fps = 1)
anim_save("Botrylloides_violaceus.gif", map_with_shadow, nframes = num_years, fps = 1)
anim_save("Botrylloides_violaceus.gif", map_with_shadow, nframes = num_years, fps = 1, renderer = gifski_renderer())
anim_save("Botrylloides_violaceus.gif", map_with_shadow, nframes = num_years, fps = 2, renderer = gifski_renderer())
map_with_animation <- p +
transition_time(year) +
ggtitle('Year: {frame_time}',
#subtitle = 'Frame {frame} of {nframes}')
subtitle = paste(species[1],species[2], sep=" "))
num_years <- max(year) - min(year) + 1
animate(map_with_animation, nframes = num_years)
map_with_shadow <- map_with_animation +
shadow_mark()
animate(map_with_shadow, nframes = num_years, renderer = gifski_renderer())
anim_save("Botrylloides_violaceus.gif", map_with_shadow, nframes = num_years, fps = 2, renderer = gifski_renderer())
